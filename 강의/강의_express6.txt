0. 초기 셋팅
    express morgan dotenv nunjucks pm2 cross-env winston

    nodemon

    views - outline
                - header
                    -main.html
                - footer
                    -main.html
                - menu
                    -main.html

1. 파일업로드
    - multer -> 셋팅
    - form 형태로 파일 데이터 전송
        - 속성 추가 필요
        <form enctype = 'multipart/form-data'>

    1) npm i multer
    2) 미들웨어, 셋팅 후 추가
        - 파일 저장 폴더 : /public/upload

        파일명 + timestamp + 확장자

    참고) 
    // Date
        new Date()
            .getTime() : 밀리초 형태로 반환(1970.01.01 0시부터 1000분의 1초로 카운팅한 숫자)
            => timestamp
        == Date.now(); 현재 시간을 밀리초형태로생성.
            => 중복방지, Unique Key -> 유일한 구분값. 예) 주문번호.

    multer 업로드 메서드
    multer 인스턴스
        .single("file 태그의 name 속성명"); -> 파일 1개 (req.file)
        .array("file 태그의 name 속성명"); -> 파일 여러개 (req.files)
        .fields(....)

2. 쿠키, 세션
    - 웹사이트를 이용하는 개인화된 데이터를 저장,수정,삭제
    - 쿠키: 브라우저에 데이터를 저장
        - Request Header : 쿠키 데이터가 문자열 형태로 저장
        - 정보가 브라우저(Request Header)에 모두 노출 -> 보안에 취약
        - 회원 아이디, 비밀번호, 이름, 전화번호 -> 개인정보 저장하면 안됨.
        - 개인정보를 제외한 기타 브라우저별 개인화된 데이터만 권장

        - cookie-parser 
            - Request Header - cookie 데이터(문자열) -> 사용하기 쉽도록 객체로 변환
            - 추가,변경,삭제에 대한 기능

            npm i cookie-parser
            - 미들웨어 등록
            - 쿠키 추가, 변경
            res.cookie("이름","값");
            - 쿠키 조회
            req.cookies 하위 속성으로 조회
            - 쿠키 삭제
            res.clearCookie("이름");
        
    
    - 세션: 서버에 데이터를 저장
        - 데이터가 브라우저에 노출되지 않음 (Request Header에 없음)
        - 개인화된 데이터를 어떻게 찾는가??
        - 쿠키가 없으면 세션을 통한 데이터 검색이 불가
        - 세션ID는 쿠키에 설정 -> 값 -> 서버에서 개인화된 데이터를 찾는 키값
    
    express-session
    npm i express-session

    req.session - 객체
    req.session.속성명 = 값; // 추가변경

    delete req.session.속성명; // 세션 값 삭제

    req.session.destroy(); // 세션 전부 삭제


3. 암호화 해시
    비밀번호를 그대로 저장하면 안됨. 
    암호화 
        - 단방향 암호화 (암호화만 가능 - 복호화 불가능) : 해시
        - 양방향 암호화 (암호화 <-> 복호화) === 원데이터로 복구가 가능

    비밀번호 : 단방향 암호화
            - 관리자는 회원의 비밀번호를 알 필요가 없다.
            - 입력한 비밀번호가 일치하는지만 체크
            - 데이터 저장을 해시(단방향 암호화)로 저장
            - 회원이 입력한 비밀번호를 해시화해서 저장된 해시와 일치 여부만 체크 (동일한 데이터에 대한 해시는 동일)

            - 단방향 암호화 알고리즘
                : 같은 값은 같은 해시코드
                
                (md5, sh1, - 취약점이 발견
                sha256, sha512 - 아직까지는 괜찮다)

                문제점
                    : 같은 값을 계속 체크하면 일치하는 값을 알 수 있다.
                    (md5, sha1 의 경우는 해시의 길이가 짧아서 계속 체크하는 횟수가 비교적 짧기 때문에 원데이터를 알수 있다. - 레인보우 테이블)

            sha512 -> 단방향 암호화(해시)

            -crypto 모듈(nodejs 단방향 내장모듈)
                .createHash("알고리즘")
                .update("데이터")
                .digest("방식") : 암호화 데이터를 보기좋게 문자열로 변환
                    - base64, hex(16진수)

            같은 값에 대해서 고정 해시 값이 나오기 때문에 유추가 가능
            -> 보완점 -> 유동 해시(같은 값이라도 해시를 생성할때 마다 변함 -> 유추가 불가능)
            -> 별도로 해시를 검증하는 메서드를 제공
            -> bcrypt
                npm i bcrypt
                .hash("데이터", round)
                    round: 해시 생성의 반복 여부
                .compare("데이터", hash)


    + 회원 가입, 로그인 -> 파일로 저장

4. GET 
    - req.query
    - req.params

   POST(+DELETE, PUT, PATCH, ... )
    - req.body